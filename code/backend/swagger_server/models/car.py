# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Car(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, brand: str=None, model: str=None, variant: str=None, type: str=None, price_before_coe: float=None, price_after_coe: float=None, best_bidding_exercise: str=None, photo: str=None):  # noqa: E501
        """Car - a model defined in Swagger

        :param id: The id of this Car.  # noqa: E501
        :type id: int
        :param brand: The brand of this Car.  # noqa: E501
        :type brand: str
        :param model: The model of this Car.  # noqa: E501
        :type model: str
        :param variant: The variant of this Car.  # noqa: E501
        :type variant: str
        :param type: The type of this Car.  # noqa: E501
        :type type: str
        :param price_before_coe: The price_before_coe of this Car.  # noqa: E501
        :type price_before_coe: float
        :param price_after_coe: The price_after_coe of this Car.  # noqa: E501
        :type price_after_coe: float
        :param best_bidding_exercise: The best_bidding_exercise of this Car.  # noqa: E501
        :type best_bidding_exercise: str
        :param photo: The photo of this Car.  # noqa: E501
        :type photo: str
        """
        self.swagger_types = {
            'id': int,
            'brand': str,
            'model': str,
            'variant': str,
            'type': str,
            'price_before_coe': float,
            'price_after_coe': float,
            'best_bidding_exercise': str,
            'photo': str
        }

        self.attribute_map = {
            'id': 'id',
            'brand': 'brand',
            'model': 'model',
            'variant': 'variant',
            'type': 'type',
            'price_before_coe': 'priceBeforeCoe',
            'price_after_coe': 'priceAfterCoe',
            'best_bidding_exercise': 'bestBiddingExercise',
            'photo': 'photo'
        }
        self._id = id
        self._brand = brand
        self._model = model
        self._variant = variant
        self._type = type
        self._price_before_coe = price_before_coe
        self._price_after_coe = price_after_coe
        self._best_bidding_exercise = best_bidding_exercise
        self._photo = photo

    @classmethod
    def from_dict(cls, dikt) -> 'Car':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Car of this Car.  # noqa: E501
        :rtype: Car
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Car.


        :return: The id of this Car.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Car.


        :param id: The id of this Car.
        :type id: int
        """

        self._id = id

    @property
    def brand(self) -> str:
        """Gets the brand of this Car.


        :return: The brand of this Car.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand: str):
        """Sets the brand of this Car.


        :param brand: The brand of this Car.
        :type brand: str
        """

        self._brand = brand

    @property
    def model(self) -> str:
        """Gets the model of this Car.


        :return: The model of this Car.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Car.


        :param model: The model of this Car.
        :type model: str
        """

        self._model = model

    @property
    def variant(self) -> str:
        """Gets the variant of this Car.


        :return: The variant of this Car.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant: str):
        """Sets the variant of this Car.


        :param variant: The variant of this Car.
        :type variant: str
        """

        self._variant = variant

    @property
    def type(self) -> str:
        """Gets the type of this Car.


        :return: The type of this Car.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Car.


        :param type: The type of this Car.
        :type type: str
        """

        self._type = type

    @property
    def price_before_coe(self) -> float:
        """Gets the price_before_coe of this Car.


        :return: The price_before_coe of this Car.
        :rtype: float
        """
        return self._price_before_coe

    @price_before_coe.setter
    def price_before_coe(self, price_before_coe: float):
        """Sets the price_before_coe of this Car.


        :param price_before_coe: The price_before_coe of this Car.
        :type price_before_coe: float
        """

        self._price_before_coe = price_before_coe

    @property
    def price_after_coe(self) -> float:
        """Gets the price_after_coe of this Car.


        :return: The price_after_coe of this Car.
        :rtype: float
        """
        return self._price_after_coe

    @price_after_coe.setter
    def price_after_coe(self, price_after_coe: float):
        """Sets the price_after_coe of this Car.


        :param price_after_coe: The price_after_coe of this Car.
        :type price_after_coe: float
        """

        self._price_after_coe = price_after_coe

    @property
    def best_bidding_exercise(self) -> str:
        """Gets the best_bidding_exercise of this Car.


        :return: The best_bidding_exercise of this Car.
        :rtype: str
        """
        return self._best_bidding_exercise

    @best_bidding_exercise.setter
    def best_bidding_exercise(self, best_bidding_exercise: str):
        """Sets the best_bidding_exercise of this Car.


        :param best_bidding_exercise: The best_bidding_exercise of this Car.
        :type best_bidding_exercise: str
        """

        self._best_bidding_exercise = best_bidding_exercise

    @property
    def photo(self) -> str:
        """Gets the photo of this Car.


        :return: The photo of this Car.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo: str):
        """Sets the photo of this Car.


        :param photo: The photo of this Car.
        :type photo: str
        """

        self._photo = photo
